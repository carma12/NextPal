{"version":3,"sources":["pages/AuthForm.module.css","components/Layout/Header.module.css","components/Friends/Friend.module.css","components/Auth/PreAuth.module.css","pages/StartingPage.module.css","pages/Friends.module.css","store/friends-slice.js","store/friends-actions.js","store/auth-slice.js","components/Layout/Layout.js","components/Auth/PreAuth.js","assets/images/joel-muniz-0QuIgOjLLXc-unsplash.jpg","pages/StartingPage.js","pages/AuthForm.js","store/auth-actions.js","components/Friends/Friend.js","components/Layout/Header.js","pages/Friends.js","App.js","store/index.js","index.js"],"names":["module","exports","friendsSlice","createSlice","name","initialState","users","myFriends","friendsFromDBReady","reducers","setMyFriendsList","state","action","payload","setUsers","usersRetrieved","user","push","id","first","first_name","last","last_name","email","avatar","addNewFriend","newFriend","find","friend","deleteFriend","friendId","updatedArray","filter","friendsActions","actions","FIREBASE_DB","initialAuthSlice","isLogin","isLoading","token","localStorage","getItem","logoutTimer","error","authSlice","setLoadingState","setIsLoginState","setToken","checkUserStatus","setLogoutTimer","setError","authActions","Layout","props","children","PreAuth","history","useHistory","className","classes","Button","LogInButton","variant","onClick","event","preventDefault","StartingPage","ImageContainer","src","startingPageImg","alt","AuthForm","dispatch","useDispatch","useState","logInMode","setLogInMode","useForm","register","handleSubmit","errors","formState","Form","MainForm","onSubmit","data","userData","password","calculateRemainingTime","expirationTime","currentTime","Date","getTime","a","logInRequest","fetch","method","body","JSON","stringify","returnSecureToken","headers","response","json","message","alert","idToken","setItem","expiresIn","remainingTime","setTimeout","removeItem","logIn","signUpRequest","ok","Error","console","log","signUp","Control","Input","type","placeholder","required","maxLength","pattern","value","minLength","ButtonGroup","vertical","LogButton","SwitchMode","prevState","TestCredentials","Friend","buttonTitle","setButtonTitle","emailShown","setEmailShown","useEffect","isFriend","ButtonRemove","Header","useSelector","auth","HeaderText","LogoutListElement","LogoutButton","clearTimeout","Friends","allUsers","friends","isMyFriendsListReady","userId","usersList","map","spinner","Spinner","as","animation","size","role","aria-hidden","isInitial","App","myFriendsList","sendRequest","fetchData","friendsData","response1","response2","data1","data2","concat","usersData","path","exact","to","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cb0fc161.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"AuthForm\":\"AuthForm_AuthForm__N4E0x\",\"MainForm\":\"AuthForm_MainForm__HEt6F\",\"Input\":\"AuthForm_Input__Vt0Ui\",\"LogButton\":\"AuthForm_LogButton__3_BYn\",\"SwitchMode\":\"AuthForm_SwitchMode__1GdBJ\",\"TestCredentials\":\"AuthForm_TestCredentials__3kgEZ\",\"Error\":\"AuthForm_Error__2h1l9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3ATBq\",\"HeaderText\":\"Header_HeaderText__3l9nN\",\"LogoutListElement\":\"Header_LogoutListElement__2fEYl\",\"LogoutButton\":\"Header_LogoutButton__1jVAF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friend\":\"Friend_Friend__219Ag\",\"Button\":\"Friend_Button__3GRam\",\"ButtonRemove\":\"Friend_ButtonRemove__1Mgl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PreAuth\":\"PreAuth_PreAuth__1ATb-\",\"LogInButton\":\"PreAuth_LogInButton__1gcLu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"StartingPage\":\"StartingPage_StartingPage__zRDK1\",\"ImageContainer\":\"StartingPage_ImageContainer__1-AtL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friends\":\"Friends_Friends__sOhSC\"};","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialFriendsState = {\n    users: [],\n    myFriends: [],\n    friendsFromDBReady: false\n};\n\nconst friendsSlice = createSlice({\n    name: 'friends',\n    initialState: initialFriendsState,\n    reducers: {\n        setMyFriendsList(state, action) {\n            state.myFriends = action.payload.myFriends;\n            state.friendsFromDBReady = true;\n        },\n        setUsers(state, action) {\n            const usersRetrieved = action.payload.users;\n\n            for (const user of usersRetrieved) {\n                // Push users without isFriend variable (add this later)\n                state.users.push({\n                    id: user.id,\n                    first: user.first_name,\n                    last: user.last_name,\n                    email: user.email,\n                    avatar: user.avatar\n                });\n            }\n        },\n        addNewFriend(state, action) {\n            const newFriend = action.payload;\n            const existingFriend = state.myFriends.find(friend => friend.id === newFriend.id);\n\n            if (!existingFriend) {\n                state.myFriends.push({\n                    id: newFriend.id,\n                    first: newFriend.first,\n                    last: newFriend.last,\n                    email: newFriend.email,\n                    avatar: newFriend.avatar\n                });\n            }\n        },\n        deleteFriend(state, action) {\n            const friendId = action.payload.friendId;\n            const updatedArray = state.myFriends.filter(friend => friend.id !== friendId);\n\n            if (updatedArray) {\n                state.myFriends = updatedArray;\n            }\n        }\n    }\n});\n\nexport const friendsActions = friendsSlice.actions;\nexport default friendsSlice;\n","import {friendsActions} from \"./friends-slice\";\n\nconst REQUES_API_1 = 'https://reqres.in/api/users?page=1';\nconst REQUES_API_2 = 'https://reqres.in/api/users?page=2';\nconst FIREBASE_DB = 'https://nextpal-5e69e-default-rtdb.firebaseio.com/myFriends.json';\n\n// HTTP Request - Store my list of friends in my database\nexport const storeMyFriends = (myFriendsList) => {\n    return async dispatch => {\n        const sendRequest = async () => {\n            const response = await fetch(FIREBASE_DB,\n                {\n                    method: 'PUT',\n                    body: JSON.stringify(myFriendsList)\n                });\n            if (!response.ok) {\n                throw new Error('Friend cannot be added');\n            }\n        };\n\n        try {\n            await sendRequest();\n            dispatch(friendsActions.setMyFriendsList({ // setMyFriends\n                myFriends: myFriendsList\n            }));\n        } catch (error) {\n            console.log('ERROR (storeMyFriends) -> ' + error);\n        }\n    }\n};\n\n// HTTP Request - Get my Friends in my database\nexport const getMyFriends = () => {\n    return async dispatch => {\n        const fetchData = async () => {\n            const response = await fetch(FIREBASE_DB);\n            if (!response.ok) {\n                throw new Error('Could not fetch list of friends');\n            }\n\n            return await response.json();\n        }\n\n        try {\n            const friendsData = await fetchData();\n            dispatch(friendsActions.setMyFriendsList({\n                myFriends: !friendsData ? [] : friendsData\n            }));\n        } catch (error) {\n            console.log('ERROR (getMyFriends) -> ' + error);\n        }\n    }\n};\n\n//HTTP Request - Main list of users (https://reqres.in/)\nexport const fetchAllUsers = () => {\n    return async dispatch => {\n        const fetchData = async () => {\n            const response1 = await fetch(REQUES_API_1);\n            const response2 = await fetch(REQUES_API_2);\n\n            if (!response1.ok || !response2.ok) {\n                throw new Error('Could not fetch list of users');\n            }\n\n            const data1 = await response1.json();\n            const data2 = await response2.json();\n\n            return data1.data.concat(data2.data);\n        }\n\n        try {\n            const usersData = await fetchData();\n\n            dispatch(friendsActions.setUsers({\n                users: usersData\n            }));\n        } catch (error) {\n            console.log('ERROR (fetchAllUsers) -> ' + error);\n        }\n    }\n};\n","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialAuthSlice = {\n    isLogin: false,\n    isLoading: false,\n    token: localStorage.getItem('token'),\n    logoutTimer: null,\n    error: null\n}\n\nconst authSlice = createSlice({\n    name: 'auth',\n    initialState: initialAuthSlice,\n    reducers: {\n        setLoadingState(state, action) {\n            state.isLoading = action.payload; // true || false\n            // state.isLoading = !state.isLoading;\n        },\n        setIsLoginState(state, action) {\n            state.isLogin = action.payload; // true || false\n            //  state.isLogin = !state.isLogin;\n        },\n        setToken(state, action) {\n            state.token = action.payload; // null || <Code>\n        },\n        checkUserStatus(state, action) {\n            if (!!state.token) { // truthy\n                state.isLogin = true;\n            }\n        },\n        setLogoutTimer(state, action) {\n            state.logoutTimer = action.payload;\n        },\n        setError(state, action) {\n            state.error = action.payload;\n        }\n    }\n});\n\nexport const authActions = authSlice.actions;\nexport default authSlice;\n","import {Fragment} from \"react\";\n\nconst Layout = (props) => {\n    return (\n        <Fragment>\n            <main>{props.children}</main>\n        </Fragment>\n    );\n}\n\nexport default Layout;\n","import {Button} from 'react-bootstrap';\nimport {useHistory} from 'react-router-dom';\n\nimport classes from './PreAuth.module.css';\n\nconst PreAuth = () => {\n    const history = useHistory();\n\n    const toLogInButtonHandler = (event) => {\n        event.preventDefault();\n        history.push('/login');\n    };\n\n    return (\n        <div className={classes.PreAuth}>\n            <h1>Check out what is going up</h1>\n            <h3>Join to NextPal</h3>\n            <Button\n                className={classes.LogInButton}\n                variant=\"primary\"\n                onClick={toLogInButtonHandler}\n            >\n                Log In\n            </Button>\n        </div>\n    );\n};\n\nexport default PreAuth;\n","export default __webpack_public_path__ + \"static/media/joel-muniz-0QuIgOjLLXc-unsplash.7abb0643.jpg\";","import PreAuth from \"../components/Auth/PreAuth\";\n\nimport classes from './StartingPage.module.css';\nimport startingPageImg from '../assets/images/joel-muniz-0QuIgOjLLXc-unsplash.jpg';\n\nconst StartingPage = () => {\n    return (\n        <div className={classes.StartingPage}>\n            <div className={classes.ImageContainer}>\n                <img src={startingPageImg} alt=\"a group of girlfriends\"/>\n            </div>\n            <PreAuth />\n        </div>\n    );\n}\n\nexport default StartingPage;\n","import {Form, Button, ButtonGroup} from 'react-bootstrap';\nimport {useDispatch} from \"react-redux\";\nimport {useState} from \"react\";\nimport {useForm} from \"react-hook-form\";\n\nimport classes from './AuthForm.module.css';\nimport {logIn, signUp} from \"../store/auth-actions\";\nimport {useHistory} from \"react-router-dom\";\n\n\n// TODO: When user logs in, retrieve its user data from Firebase DB\n// TODO: When user registers the first time, ask for extra data (username, name)\n\nconst AuthForm = () => {\n    const history = useHistory();\n    const dispatch = useDispatch();\n\n    // const errorStatus = useSelector(state => state.auth.error);\n\n    const emailRe = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\n    const [logInMode, setLogInMode] = useState(true);\n\n    const {register, handleSubmit, /*watch,*/ formState: {errors}} = useForm();\n\n    // console.log(watch()); // watch input value by passing the name of it\n\n    const logInUser = (data) => {\n        const userData = {\n            email: data.email,\n            password: data.password\n        };\n\n        dispatch(logIn(userData));\n    }\n\n    const registerUser = (data) => {\n        const userData = {\n            email: data.email,\n            password: data.password\n        };\n\n        dispatch(signUp(userData));\n        history.push('/login');\n    }\n\n    const switchAuthModeHandler = () => {\n        setLogInMode((prevState) => !prevState);\n    }\n\n\n    return (\n        <section className={classes.AuthForm}>\n            <h1>{logInMode ? 'Sign in to NextPal' : 'Sign up to NextPal'}</h1>\n            <Form className={classes.MainForm} onSubmit={handleSubmit(logInMode ? logInUser : registerUser)}>\n                <Form.Control\n                    className={classes.Input}\n                    type=\"email\"\n                    placeholder=\"name@example.com\"\n                    id=\"email\"\n                    name=\"email\"\n                    {...register('email', {\n                            required: 'Email is required',\n                            maxLength: 45,\n                            pattern: {\n                                value: emailRe,\n                                message: 'Enter a valid email'\n                            }\n                        }\n                    )}\n                />\n                {errors.email && <div className={classes.Error}>{errors.email.message}</div>}\n\n                <Form.Control\n                    className={classes.Input}\n                    type=\"password\"\n                    placeholder=\"password\"\n                    id=\"password\"\n                    name=\"password\"\n                    {...register('password', {\n                        required: 'Password is required',\n                        minLength: {\n                            value: 6,\n                            message: 'Password must have at least 6 characters'\n                        }\n                    })}\n                />\n                {errors.password && <div className={classes.Error}>{errors.password.message}</div>}\n\n                <ButtonGroup vertical>\n                    <Button\n                        className={classes.LogButton}\n                        variant=\"primary\"\n                        type=\"submit\"\n                    >\n                        {logInMode ? 'Log In' : 'Sign up'}\n                    </Button>\n                    <Button\n                        className={classes.SwitchMode}\n                        variant=\"link\"\n                        onClick={switchAuthModeHandler}\n                    >\n                        {logInMode ? 'Create new account' : 'Login with existing account'}\n                    </Button>\n                </ButtonGroup>\n                <div className={classes.TestCredentials}>\n                    <p>Test me</p>\n                    <p>Try to register yourself!</p>\n                </div>\n\n            </Form>\n        </section>\n    );\n};\n\nexport default AuthForm;\n","import {authActions} from \"./auth-slice\";\n\nconst LOGIN_URL = 'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBOlPcwmVrbztUP0PCTHLwbsNxNR3UoHsY';\nconst SIGNUP_URL = 'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBOlPcwmVrbztUP0PCTHLwbsNxNR3UoHsY';\n\nexport const logIn = (userData) => {\n\n    const calculateRemainingTime = (expirationTime) => {\n        const currentTime = new Date().getTime(); // now\n        const adjExpirationTime = new Date(expirationTime).getTime();\n\n        // Remaining duration:\n        return adjExpirationTime - currentTime;\n    };\n\n    return async dispatch => {\n        const logInRequest = async () => {\n            const response = await fetch(LOGIN_URL,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        email: userData.email,\n                        password: userData.password,\n                        returnSecureToken: true\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n            return response.json();\n        };\n\n        try {\n            dispatch(authActions.setLoadingState(true));\n            const data = await logInRequest();\n\n            if (data.error) {\n                dispatch(authActions.setError(data.error.message));\n                alert(data.error.message);\n            } else {\n                dispatch(authActions.setIsLoginState(true));\n                dispatch(authActions.setToken(data.idToken));\n                localStorage.setItem('token', data.idToken);\n\n                // Calculate remaining time\n                localStorage.setItem('expirationTime', data.expiresIn) // default: 3600s = 1h\n                const expirationTime = new Date(\n                    new Date().getTime() + (+data.expiresIn * 1000)\n                );\n                const remainingTime = calculateRemainingTime(expirationTime);\n                const logoutTimer = setTimeout(() => {\n                    localStorage.removeItem('token');\n                    localStorage.removeItem('expirationTime');\n                    dispatch(authActions.setToken(null));\n                    dispatch(authActions.setIsLoginState(false));\n                },remainingTime);\n                dispatch(authActions.setLogoutTimer(logoutTimer));\n            }\n\n            dispatch(authActions.setError(null));\n            dispatch(authActions.setLoadingState(false));\n\n\n        } catch (error) {\n            alert('ERROR: ' + error);\n        }\n    }\n};\n\nexport const signUp = (userData) => {\n    return async dispatch => {\n        const signUpRequest = async () => {\n            const response = await fetch(SIGNUP_URL,\n                {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        email: userData.email,\n                        password: userData.password,\n                        returnSecureToken: true\n                    }),\n                    headers: {\n                        'Content-Type': 'application/json'\n                    }\n                });\n            if (!response.ok) {\n                throw new Error('Cannot register email. Error trying to send data to Firebase.');\n            }\n        };\n\n        try {\n            dispatch(authActions.setLoadingState(true));\n            await signUpRequest();\n            // dispatch(authActions.setIsLoginState(true));\n            dispatch(authActions.setLoadingState(false));\n        } catch (error) {\n            console.log('ERROR (logIn) -> ' + error);\n        }\n    }\n};\n","import React, {useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport classes from './Friend.module.css';\nimport Button from 'react-bootstrap/Button';\nimport {friendsActions} from \"../../store/friends-slice\";\n\nconst Friend = (props) => {\n    const dispatch = useDispatch();\n    const [buttonTitle, setButtonTitle] = useState('Add Pal');\n    const [emailShown, setEmailShown] = useState('');\n\n    useEffect(() => {\n        if (props.isFriend) {\n            setButtonTitle('Delete Pal');\n            setEmailShown(props.email);\n        }\n    }, [props.isFriend, props.email]);\n\n    const addFriend = () => {\n        dispatch(friendsActions.addNewFriend({\n            id: props.id,\n            first: props.first,\n            last: props.last,\n            email: props.email,\n            avatar: props.avatar,\n            isFriend: props.isFriend\n        }));\n        setButtonTitle('Delete Pal');\n        setEmailShown(props.email);\n    };\n\n    const removeFriend = () => {\n        dispatch(friendsActions.deleteFriend({\n            friendId: props.id\n        }));\n        setButtonTitle('Add Pal');\n        setEmailShown('');\n    };\n\n    return <div className={classes.Friend}>\n        <img src={props.avatar} alt=\"A potential friend to add in your friend's list\"/>\n        <p>{props.first} {props.last}</p>\n        <p><i>{emailShown}</i></p>\n        <Button\n            className={!props.isFriend ? classes.Button : classes.ButtonRemove}\n            variant={!props.isFriend ? \"primary\" : \"danger\"}\n            onClick={!props.isFriend ? addFriend : removeFriend}\n        >{buttonTitle}</Button>\n    </div>;\n};\n\nexport default Friend;\n","// import {Link} from 'react-router-dom';\nimport {Button} from 'react-bootstrap';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {useHistory} from \"react-router-dom\";\n\nimport classes from './Header.module.css';\nimport {authActions} from \"../../store/auth-slice\";\n\nconst Header = () => {\n    const dispatch = useDispatch();\n    const history = useHistory();\n    const logoutTimer = useSelector(state => state.auth.logoutTimer);\n\n    const logoutHandler = (event) => {\n        event.preventDefault();\n        dispatch(authActions.setToken(null));\n        dispatch(authActions.setIsLoginState(false));\n        localStorage.removeItem('token');\n        localStorage.removeItem('expirationTime');\n        clearTimeout(logoutTimer);\n        history.push('/');\n    };\n\n    return(\n        <div className={classes.Header}>\n            <div className={classes.HeaderText}>\n                <h1>NextPal</h1>\n                <h3>Make pals around the world!</h3>\n            </div>\n            <nav>\n                <ul className={classes.LogoutListElement}>\n                    <li>\n                        <Button\n                            className={classes.LogoutButton}\n                            variant=\"link\"\n                            type=\"submit\"\n                            onClick={logoutHandler}\n                        >\n                            Log Out\n                        </Button>\n                    </li>\n                </ul>\n            </nav>\n        </div>\n    );\n};\n\nexport default Header;\n","import {Fragment} from \"react\";\nimport {Spinner} from 'react-bootstrap';\nimport {useSelector} from \"react-redux\";\n\nimport classes from './Friends.module.css';\nimport Friend from '../components/Friends/Friend';\nimport Header from \"../components/Layout/Header\";\n\nconst Friends = () => {\n        // TODO: Retrieve specific friends of that specific user. Store friends in DB.\n        const allUsers = useSelector(state => state.friends.users);\n        const myFriends = useSelector(state => state.friends.myFriends);\n        const isMyFriendsListReady = useSelector(state => state.friends.friendsFromDBReady);\n\n        const isFriend = (userId) => {\n            for (const friend of myFriends) {\n                if (friend.id === userId) {\n                    return true\n                }\n            }\n            return false;\n        };\n\n        const usersList = (isMyFriendsListReady) && (\n            <div className={classes.Friends}>\n                {allUsers.map(user => (\n                    <Friend\n                        key={user.id}\n                        id={user.id}\n                        first={user.first}\n                        last={user.last}\n                        email={user.email}\n                        avatar={user.avatar}\n                        isFriend={isFriend(user.id)}\n                    />\n                ))}\n            </div>\n        );\n        const spinner = (!isMyFriendsListReady) && <Spinner\n            as=\"span\"\n            animation=\"border\"\n            size=\"sm\"\n            role=\"status\"\n            aria-hidden=\"true\"\n        />;\n\n        return (\n            <Fragment>\n                <Header/>\n                {spinner}\n                {usersList}\n            </Fragment>\n        );\n    }\n;\n\nexport default Friends;\n","import {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {Switch, Route, Redirect} from 'react-router-dom';\n\nimport {fetchAllUsers, getMyFriends, storeMyFriends} from \"./store/friends-actions\";\nimport authSlice from \"./store/auth-slice\";\nimport Layout from \"./components/Layout/Layout\";\nimport StartingPage from \"./pages/StartingPage\";\nimport AuthForm from \"./pages/AuthForm\";\nimport Friends from \"./pages/Friends\";\n\nlet isInitial = true;\n\nfunction App() {\n    const dispatch = useDispatch();\n    const myFriends = useSelector(state => state.friends.myFriends);\n    const isLogin = useSelector(state => state.auth.isLogin);\n\n    // Update myFriends array from the ones in the DB\n    useEffect(() => {\n        // Preventing the list of Friends to be erased (in DB) when reload the page\n        if (isInitial) {\n            isInitial = false;\n            return;\n        }\n        dispatch(storeMyFriends(myFriends));\n    }, [dispatch, myFriends]);\n\n    // Update list of friends\n    useEffect(() => {\n        dispatch(getMyFriends());\n    }, [dispatch]);\n\n    // Get all users at when site loads the first time\n    useEffect(() => {\n        dispatch(fetchAllUsers());\n    }, [dispatch]);\n\n    // Allow persisting user authentication status (the user won't lose their session when reloading the page)\n    useEffect(() => {\n        dispatch(authSlice.actions.checkUserStatus());\n    }, [dispatch]);\n\n\n\n    return (\n        <Layout>\n            <Switch>\n                {!isLogin && (\n                    <Route path='/login'>\n                        <AuthForm/>\n                    </Route>\n                )}\n                {!isLogin && (\n                    <Route path='/' exact>\n                        <StartingPage/>\n                    </Route>\n                )}\n                {isLogin && (\n                    <Route path='/logout'>\n                        <Redirect to='/'/>\n                    </Route>\n                )}\n                {isLogin && (\n                    <Route path='/friends'>\n                        <Friends/>\n                    </Route>\n                )}\n                <Route path='*'>\n                    {isLogin && (\n                        <Redirect to='/friends'/>\n                    )}\n                    {!isLogin && (\n                        <Redirect to='/login'/> // before was '/'\n                    )}\n                </Route>\n            </Switch>\n        </Layout>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\n\nimport friendsSlice from \"./friends-slice\";\nimport authSlice from \"./auth-slice\";\n\nconst store = configureStore({\n    reducer: {\n        friends: friendsSlice.reducer,\n        auth: authSlice.reducer\n    }\n});\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}
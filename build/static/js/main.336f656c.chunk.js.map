{"version":3,"sources":["components/Friends/Friend.module.css","components/Layout/Header.module.css","components/Friends/Friends.module.css","store/friends-slice.js","store/friends-actions.js","components/Layout/Header.js","components/Friends/Friend.js","components/Friends/Friends.js","App.js","store/index.js","index.js"],"names":["module","exports","friendsSlice","createSlice","name","initialState","users","myFriends","friendsFromDBReady","reducers","setMyFriendsList","state","action","payload","setUsers","usersRetrieved","user","push","id","first","first_name","last","last_name","email","avatar","addNewFriend","newFriend","find","friend","deleteFriend","friendId","updatedArray","filter","friendsActions","actions","FIREBASE_DB","Header","className","classes","Friend","props","dispatch","useDispatch","useState","buttonTitle","setButtonTitle","emailShown","setEmailShown","useEffect","isFriend","src","alt","Button","ButtonRemove","variant","onClick","Friends","allUsers","useSelector","friends","isMyFriendsListReady","userId","usersList","map","spinner","Fragment","isInitial","App","myFriendsList","a","sendRequest","fetch","method","body","JSON","stringify","ok","Error","console","log","fetchData","response","json","friendsData","response1","response2","data1","data2","data","concat","usersData","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.336f656c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friend\":\"Friend_Friend__219Ag\",\"Button\":\"Friend_Button__3GRam\",\"ButtonRemove\":\"Friend_ButtonRemove__1Mgl9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3ATBq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Friends\":\"Friends_Friends__1ttQE\",\"lds-hourglass\":\"Friends_lds-hourglass__2qTAK\"};","import {createSlice} from \"@reduxjs/toolkit\";\n\nconst initialFriendsState = {\n    users: [],\n    myFriends: [],\n    friendsFromDBReady: false\n};\n\nconst friendsSlice = createSlice({\n    name: 'friends',\n    initialState: initialFriendsState,\n    reducers: {\n        setMyFriendsList(state, action) {\n            state.myFriends = action.payload.myFriends;\n            state.friendsFromDBReady = true;\n        },\n        setUsers(state, action) {\n            const usersRetrieved = action.payload.users;\n\n            for (const user of usersRetrieved) {\n                // Push users without isFriend variable (add this later)\n                state.users.push({\n                    id: user.id,\n                    first: user.first_name,\n                    last: user.last_name,\n                    email: user.email,\n                    avatar: user.avatar\n                });\n            }\n        },\n        addNewFriend(state, action) {\n            const newFriend = action.payload;\n            const existingFriend = state.myFriends.find(friend => friend.id === newFriend.id);\n\n            if (!existingFriend) {\n                state.myFriends.push({\n                    id: newFriend.id,\n                    first: newFriend.first,\n                    last: newFriend.last,\n                    email: newFriend.email,\n                    avatar: newFriend.avatar\n                });\n            }\n        },\n        deleteFriend(state, action) {\n            const friendId = action.payload.friendId;\n            const updatedArray = state.myFriends.filter(friend => friend.id !== friendId);\n\n            if (updatedArray) {\n                state.myFriends = updatedArray;\n            }\n        }\n    }\n});\n\nexport const friendsActions = friendsSlice.actions;\nexport default friendsSlice;\n","import {friendsActions} from \"./friends-slice\";\n\nconst REQUES_API_1 = 'https://reqres.in/api/users?page=1';\nconst REQUES_API_2 = 'https://reqres.in/api/users?page=2';\nconst FIREBASE_DB = 'https://nextpal-5e69e-default-rtdb.firebaseio.com/myFriends.json';\n\n// HTTP Request - Store my list of friends in my database\nexport const storeMyFriends = (myFriendsList) => {\n    return async dispatch => {\n        const sendRequest = async () => {\n            const response = await fetch(FIREBASE_DB,\n                {\n                    method: 'PUT',\n                    body: JSON.stringify(myFriendsList)\n                });\n            if (!response.ok) {\n                throw new Error('Friend cannot be added');\n            }\n        };\n\n        try {\n            await sendRequest();\n            dispatch(friendsActions.setMyFriendsList({ // setMyFriends\n                myFriends: myFriendsList\n            }));\n        } catch (error) {\n            console.log('ERROR (storeMyFriends) -> ' + error);\n        }\n    }\n};\n\n// HTTP Request - Get my Friends in my database\nexport const getMyFriends = () => {\n    return async dispatch => {\n        const fetchData = async () => {\n            const response = await fetch(FIREBASE_DB);\n            if (!response.ok) {\n                throw new Error('Could not fetch list of friends');\n            }\n\n            return await response.json();\n        }\n\n        try {\n            const friendsData = await fetchData();\n            dispatch(friendsActions.setMyFriendsList({\n                myFriends: !friendsData ? [] : friendsData\n            }));\n        } catch (error) {\n            console.log('ERROR (getMyFriends) -> ' + error);\n        }\n    }\n};\n\n//HTTP Request - Main list of users (https://reqres.in/)\nexport const fetchAllUsers = () => {\n    return async dispatch => {\n        const fetchData = async () => {\n            const response1 = await fetch(REQUES_API_1);\n            const response2 = await fetch(REQUES_API_2);\n\n            if (!response1.ok || !response2.ok) {\n                throw new Error('Could not fetch list of users');\n            }\n\n            const data1 = await response1.json();\n            const data2 = await response2.json();\n\n            return data1.data.concat(data2.data);\n        }\n\n        try {\n            const usersData = await fetchData();\n\n            dispatch(friendsActions.setUsers({\n                users: usersData\n            }));\n        } catch (error) {\n            console.log('ERROR (fetchAllUsers) -> ' + error);\n        }\n    }\n};\n","import classes from './Header.module.css';\n\nconst Header = () => {\n    return(\n        <div className={classes.Header}>\n            <h1>NextPal</h1>\n            <h3>Make pals around the world!</h3>\n        </div>\n    );\n};\n\nexport default Header;\n","import React, {useEffect, useState} from 'react';\nimport {useDispatch} from \"react-redux\";\nimport classes from './Friend.module.css';\nimport Button from 'react-bootstrap/Button';\nimport {friendsActions} from \"../../store/friends-slice\";\n\nconst Friend = (props) => {\n    const dispatch = useDispatch();\n    const [buttonTitle, setButtonTitle] = useState('Add Pal');\n    const [emailShown, setEmailShown] = useState('');\n\n    useEffect(() => {\n        if (props.isFriend) {\n            setButtonTitle('Delete Pal');\n            setEmailShown(props.email);\n        }\n    }, [props.isFriend, props.email]);\n\n    const addFriend = () => {\n        dispatch(friendsActions.addNewFriend({\n            id: props.id,\n            first: props.first,\n            last: props.last,\n            email: props.email,\n            avatar: props.avatar,\n            isFriend: props.isFriend\n        }));\n        setButtonTitle('Delete Pal');\n        setEmailShown(props.email);\n    };\n\n    const removeFriend = () => {\n        dispatch(friendsActions.deleteFriend({\n            friendId: props.id\n        }));\n        setButtonTitle('Add Pal');\n        setEmailShown('');\n    };\n\n    return <div className={classes.Friend}>\n        <img src={props.avatar} alt=\"A potential friend to add in your friend's list\"/>\n        <p>{props.first} {props.last}</p>\n        <p><i>{emailShown}</i></p>\n        <Button\n            className={!props.isFriend ? classes.Button : classes.ButtonRemove}\n            variant={!props.isFriend ? \"primary\" : \"danger\"}\n            onClick={!props.isFriend ? addFriend : removeFriend}\n        >{buttonTitle}</Button>\n    </div>;\n};\n\nexport default Friend;\n","import React from \"react\";\nimport {useSelector} from \"react-redux\";\n\nimport classes from './Friends.module.css';\nimport Friend from './Friend';\n\nconst Friends = () => {\n        const allUsers = useSelector(state => state.friends.users);\n        const myFriends = useSelector(state => state.friends.myFriends);\n        const isMyFriendsListReady = useSelector(state => state.friends.friendsFromDBReady);\n\n        const isFriend = (userId) => {\n            for (const friend of myFriends) {\n                if (friend.id === userId) {\n                    return true\n                }\n            }\n            return false;\n        };\n\n        const usersList = (isMyFriendsListReady) && (\n            <div className={classes.Friends}>\n                {allUsers.map(user => (\n                    <Friend\n                        key={user.id}\n                        id={user.id}\n                        first={user.first}\n                        last={user.last}\n                        email={user.email}\n                        avatar={user.avatar}\n                        isFriend={isFriend(user.id)}\n                    />\n                ))}\n            </div>\n        );\n        const spinner = (!isMyFriendsListReady) && <div className=\"lds-hourglass\"/>;\n\n        return (\n            <React.Fragment>\n                {spinner}\n                {usersList}\n            </React.Fragment>\n        );\n    }\n;\n\nexport default Friends;\n","import {useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {fetchAllUsers, getMyFriends, storeMyFriends} from \"./store/friends-actions\";\n\nimport Header from \"./components/Layout/Header\";\nimport Friends from \"./components/Friends/Friends\";\n\nlet isInitial = true;\n\nfunction App() {\n    const dispatch = useDispatch();\n    const myFriends = useSelector(state => state.friends.myFriends);\n\n    // Update myFriends array from the ones in the DB\n    useEffect(() => {\n        // Preventing the list of Friends to be erased (in DB) when reload the page\n        if (isInitial) {\n            isInitial = false;\n            return;\n        }\n        dispatch(storeMyFriends(myFriends));\n    }, [dispatch, myFriends]);\n\n    // Update list of friends\n    useEffect(() => {\n        dispatch(getMyFriends());\n    }, [dispatch]);\n\n    // Get all users at when site loads the first time\n    useEffect(() => {\n        dispatch(fetchAllUsers());\n    }, [dispatch]);\n\n    return (\n        <div>\n            <Header/>\n            <Friends/>\n        </div>\n    );\n}\n\nexport default App;\n","import {configureStore} from \"@reduxjs/toolkit\";\n\nimport friendsSlice from \"./friends-slice\";\n\nconst store = configureStore({\n    reducer: {\n        friends: friendsSlice.reducer\n    }\n});\n\nexport default store;\n","import ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './index.css';\nimport App from './App';\nimport store from \"./store\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n"],"sourceRoot":""}